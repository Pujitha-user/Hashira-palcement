package Test1;
import java.io.File;
import java.io.FileNotFoundException;
import java.math.BigInteger;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class HashiraSolverNoLib {

    public static void main(String[] args) {
        solve("input1.json");
        solve("input2.json");
    }

    public static void solve(String filename) {
        try {
            // Read entire file content as string
            Scanner scanner = new Scanner(new File(filename));
            scanner.useDelimiter("\\Z"); // EOF delimiter
            String content = scanner.next();
            scanner.close();

            // Extract n and k using regex
            int n = extractInt(content, "\"n\"\\s*:\\s*(\\d+)");
            int k = extractInt(content, "\"k\"\\s*:\\s*(\\d+)");

            // Find roots with regex pattern
            Pattern pattern = Pattern.compile("\"(\\d+)\"\\s*:\\s*\\{[^}]*?\"base\"\\s*:\\s*\"(\\d+)\"\\s*,\\s*\"value\"\\s*:\\s*\"([^\"]+)\"[^}]*\\}");
            Matcher matcher = pattern.matcher(content);

            List<Double> xList = new ArrayList<>();
            List<Double> yList = new ArrayList<>();
            int count = 0;

            while (matcher.find() && count < k) {
                int x = Integer.parseInt(matcher.group(1));
                int base = Integer.parseInt(matcher.group(2));
                String val = matcher.group(3);

                // Decode value from base using BigInteger
                BigInteger bigVal = new BigInteger(val, base);
                double y = bigVal.doubleValue();

                xList.add((double) x);
                yList.add(y);
                count++;
            }

            double c = lagrangeInterpolation(xList, yList, 0.0);
            System.out.println("File: " + filename + " | Constant term (C): " + Math.round(c));

        } catch (FileNotFoundException e) {
            System.err.println("File not found: " + filename);
        }
    }

    private static int extractInt(String text, String regex) {
        Pattern p = Pattern.compile(regex);
        Matcher m = p.matcher(text);
        if (m.find()) {
            return Integer.parseInt(m.group(1));
        }
        throw new RuntimeException("Key not found: " + regex);
    }

    // Lagrange interpolation method
    private static double lagrangeInterpolation(List<Double> x, List<Double> y, double x0) {
        int n = x.size();
        double result = 0.0;
        for (int i = 0; i < n; i++) {
            double term = y.get(i);
            for (int j = 0; j < n; j++) {
                if (j != i) {
                    term *= (x0 - x.get(j)) / (x.get(i) - x.get(j));
                }
            }
            result += term;
        }
        return result;
    }
}



     
  
